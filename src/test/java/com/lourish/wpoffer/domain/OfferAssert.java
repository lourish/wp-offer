package com.lourish.wpoffer.domain;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * {@link Offer} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class OfferAssert extends AbstractObjectAssert<OfferAssert, Offer> {

  /**
   * Creates a new <code>{@link OfferAssert}</code> to make assertions on actual Offer.
   * @param actual the Offer we want to make assertions on.
   */
  public OfferAssert(Offer actual) {
    super(actual, OfferAssert.class);
  }

  /**
   * An entry point for OfferAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myOffer)</code> and get specific assertion with code completion.
   * @param actual the Offer we want to make assertions on.
   * @return a new <code>{@link OfferAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static OfferAssert assertThat(Offer actual) {
    return new OfferAssert(actual);
  }

  /**
   * Verifies that the actual Offer's currency is equal to the given one.
   * @param currency the given currency to compare the actual Offer's currency to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Offer's currency is not equal to the given one.
   */
  public OfferAssert hasCurrency(String currency) {
    // check that actual Offer we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting currency of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualCurrency = actual.getCurrency();
    if (!Objects.areEqual(actualCurrency, currency)) {
      failWithMessage(assertjErrorMessage, actual, currency, actualCurrency);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Offer's desc is equal to the given one.
   * @param desc the given desc to compare the actual Offer's desc to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Offer's desc is not equal to the given one.
   */
  public OfferAssert hasDesc(String desc) {
    // check that actual Offer we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting desc of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualDesc = actual.getDesc();
    if (!Objects.areEqual(actualDesc, desc)) {
      failWithMessage(assertjErrorMessage, actual, desc, actualDesc);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Offer's expires is equal to the given one.
   * @param expires the given expires to compare the actual Offer's expires to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Offer's expires is not equal to the given one.
   */
  public OfferAssert hasExpires(java.time.LocalDateTime expires) {
    // check that actual Offer we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting expires of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.time.LocalDateTime actualExpires = actual.getExpires();
    if (!Objects.areEqual(actualExpires, expires)) {
      failWithMessage(assertjErrorMessage, actual, expires, actualExpires);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Offer's id is equal to the given one.
   * @param id the given id to compare the actual Offer's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Offer's id is not equal to the given one.
   */
  public OfferAssert hasId(String id) {
    // check that actual Offer we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualId = actual.getId();
    if (!Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Offer's price is equal to the given one.
   * @param price the given price to compare the actual Offer's price to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Offer's price is not equal to the given one.
   */
  public OfferAssert hasPrice(java.math.BigDecimal price) {
    // check that actual Offer we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting price of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.math.BigDecimal actualPrice = actual.getPrice();
    if (!Objects.areEqual(actualPrice, price)) {
      failWithMessage(assertjErrorMessage, actual, price, actualPrice);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Offer's ttl is equal to the given one.
   * @param ttl the given ttl to compare the actual Offer's ttl to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Offer's ttl is not equal to the given one.
   */
  public OfferAssert hasTtl(Long ttl) {
    // check that actual Offer we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting ttl of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Long actualTtl = actual.getTtl();
    if (!Objects.areEqual(actualTtl, ttl)) {
      failWithMessage(assertjErrorMessage, actual, ttl, actualTtl);
    }

    // return the current assertion for method chaining
    return this;
  }

}
