package com.lourish.wpoffer.domain;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link Offer} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractOfferAssert<S extends AbstractOfferAssert<S, A>, A extends Offer> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractOfferAssert}</code> to make assertions on actual Offer.
   * @param actual the Offer we want to make assertions on.
   */
  protected AbstractOfferAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual Offer's currency is equal to the given one.
   * @param currency the given currency to compare the actual Offer's currency to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Offer's currency is not equal to the given one.
   */
  public S hasCurrency(String currency) {
    // check that actual Offer we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting currency of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualCurrency = actual.getCurrency();
    if (!Objects.areEqual(actualCurrency, currency)) {
      failWithMessage(assertjErrorMessage, actual, currency, actualCurrency);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Offer's desc is equal to the given one.
   * @param desc the given desc to compare the actual Offer's desc to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Offer's desc is not equal to the given one.
   */
  public S hasDesc(String desc) {
    // check that actual Offer we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting desc of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualDesc = actual.getDesc();
    if (!Objects.areEqual(actualDesc, desc)) {
      failWithMessage(assertjErrorMessage, actual, desc, actualDesc);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Offer's id is equal to the given one.
   * @param id the given id to compare the actual Offer's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Offer's id is not equal to the given one.
   */
  public S hasId(String id) {
    // check that actual Offer we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualId = actual.getId();
    if (!Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Offer's price is equal to the given one.
   * @param price the given price to compare the actual Offer's price to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Offer's price is not equal to the given one.
   */
  public S hasPrice(java.math.BigDecimal price) {
    // check that actual Offer we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting price of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.math.BigDecimal actualPrice = actual.getPrice();
    if (!Objects.areEqual(actualPrice, price)) {
      failWithMessage(assertjErrorMessage, actual, price, actualPrice);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
